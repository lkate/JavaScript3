第四章  变量，作用域和内存问题
1.基本类型和引用类型的值
   5种基本类型是按值访问的，可以操作保存在变量中的实际值。
   引用类型是按引用访问的。
   (1).动态的属性
   只能给引用类型值动态的添加属性，以便将来使用。
   (2)复制变量值
   基本类型复制值，引用类型复制指向内存中对象的指针，即对象引用实际指向内存中同一个对象。
   (3)传递参数
   ECMAScript中所有函数的值都是按值传递的。在向参数传递基本类型的值时，被传递的值会复制给一个局部变量（即命名参数），函数内的局部变量变化不会影响函数外部的变量； 在向参数传递一个引用类型的值时，会把这个值再内存中的地址复制给一个局部变量，因此这个局部变量的变化会反应在函数的外部，但并不表示参数是按引用传递的，是局部变量和外部变量引用的是同一个对象。当在函数内部重写局部变量时，会与引用的对象脱离关系。（写的不清楚，后续加深理解后会再补充）。
  (4)检测类型
  对于基本类型使用typeof 检测，
  对于引用类型要想知道是什么类型的对象，使用instanceof操作符
  alert(person instance Object)  //person是Object的实例吗？即person是Object吗

2.执行环境和作用域
     执行环境定义了变量或函数有权访问的其他数据。每个执行环境都有一个与之关联的变量对象，环境中定义的变量和函数都保存在这个变量中。在web浏览器中，全局执行环境被认为是window 对象。每个执行环境中的代码执行完毕后，该环境被销毁，其中的变量和对象也被销毁。 每个函数都有自己的执行环境。
    作用域链保证执行环境对有权访问的所有变量和函数的有序访问。作用域链的最里层是当前执行环境中的对象，最外层是全局变量。只能从内向外查询变量和函数名。外层作用域访问不到内层的变量。
    JavaScript没有块级作用域，if 语句 for 语句中声明的变量在执行完条件语句或循环语句后都会保存到当前执行环境中。
    确保在初始化变量之前使用var 声明变量，否则会成为全局变量。
