第五章 引用类型
引用类型的值（对象）是引用类型的一个实例。引用类型描述一类对象所具有的属性和方法。
1.Object类型
  对于在程序中存储和传输数据而言，确实是非常理想的选择。通常使用对象字面量来定义对象。对象字面量也是向函数传递大量可选参数的首选方式。
  访问对象属性有点表示法和方括号表示法，方括号表示法要将要访问的属性以字符串的形式放在方括号中。通常，除非必须使用变量来访问属性，否则建议使用点表示法。

2.Array类型
  ECMAScript的数组可以保存任何类型的数据，数组大小可以调整。
  数组方括号内的索引值表示要访问的值，如果访问的索引值超出数组项数，返回undefined,如果设置的索引值超出，将自动把数组的长度追加到索引值+1的长度。
  检测数组：value instance of Array ,在多个框架中失效。
                    Array.isArray(value)  确定某个值是不是数组，不管在几个框架里，IE9+。
  转换方法：toLocalString()和toString()返回数组的每一项的字符串并以逗号分隔的字符串。例如：arr=[12,14,16]; arr.toString()的值是“12,14,16”。
                   valueOf()返回的还是数组。
                   join()方法，里面的参数会替代逗号作为数组每一项的分隔符，形成新字符串。
  push()方法：可以接收任意数量的参数，并把他们依次添加到数组末尾，并返回修改后数组的长度。
  pop()方法，从数组末尾移除最后一项，减少数组的值，并返回移除的项。
         栈方法：LIFO（后进先出）的实现： arr = [1,2,3];  arr.push();//在末尾添加  arr.pop();//在末尾删除
  shift()方法：移除数组的第一个项，并返回该项。
  unshift()方法：向数组前面插入任意个项，并返回新数组的长度。

重排序方法：reverse() 方法：数组反排序。返回排序后的新数组。
                      sort()方法：按升序排序，调用toString()方法先将数组元素转成字符串再比较。这种排序方式并不理想。返回排序后的新数组。
                          sort()方法可接受一个比较函数作为参数，获得正确的排序。
                          比较函数接受2个参数，如果第一个参数应位于第二个参数之前，则返回负数。对于数值类型或者用valueof()方法会返回数值类型的对象，可以使用更简单的比较函数：function compare( a , b ){  return a - b;  } 升序排列。

操作方法： concat()方法，基于原数组添加元素的方法，contact(原数组，要添加的元素或数组); 返回值是新数组，不改变原数组。
                  slice()方法，截取数组指定项，slice（截取开始项位置，截取结束位置），返回值是截取的数组，不改变原数组。如果只有一个参数，返回从考试位置到末尾的数组。如果第2个参数小于第1个参数，返回空数组。
                  splice()方法，替换元素，splice(要替换的开始项位置，要替换的项数，要替换的元素)，返回值是被替换掉的元素组成的数组，改变原数组。如果没有第3个参数，则只删除，返回空数组。

位置方法：indexOf()和lastIndexOf() 返回参数在数组中的位置，IE9+支持。

迭代方法： IE9+
接受2个参数，一个是要在每一项上运行的函数，另一个是运行该函数的作用域对象——影响this的值。传入这些方法的函数有3个参数：数组项的值、该项在数组中的位置，和数组对象本身。不会修改原数组。
       every()和some()很相似，用于查询数组中的项是否满足某个条件。对every()来说，每一项都满足条件才会返回true,对于some()来说，有一项满足条件就会返回true.
       filter() 利用指定的函数来筛选满足条件的项。返回满足条件的数组。
       map() 也返回一个数组，这个数组的每一项是原数组的每一项运行函数之后得到的结果。适合创建与原数组一一对应的新数组。
       foreach() ,没有返回值，只对每一项进行操作，本质上与for循环迭代数组一样。

归并方法：reduce()和reduceRight() ,方向不同，其他相同。接受2个参数，在每一项上运行的函数和作为归并基础的初始值。传入其中的函数接收4个参数：前一个值、当前值、项的索引、数组对象。这个函数的任何返回值都会作为第一个参数即前一个值传给下一项的运行函数。第一次迭代发生在数组第二项上，因此第一个参数是数组第一项，第二个是数组第二项。使用reduce()可以执行数组中所有制求和的操作。
    var arr = [1,2,3,4,5];  var sum = arr.reduce( function( prev , cur ) {return pre + cur});

3.Date()类型：
    日期对象：使用new操作符和Date构造函数即可。在不传递参数的情况下，新创建的对象自动获得当前日期和时间。
    Date.parse()方法接受一个表示日期的字符串对象，根据合法的字符串返回相应日期的毫秒数（从1970.1.1开始），因为ECMA-262并没有定义应该支持哪种日期格式，因此这个方法的行为因实现而异。
Date.parse()  例：6/13/2004   January 12,2004    Tue May 25 2004 00:00:00 GMT-0700 。
如果传入的字符串不能表示日期，Date()返回NaN。也可以直接将字符串传给Date(),会在后台调用Date.parse()   new Date("May 25,2004")  和 new Date(Date.parse("May 25,2004"))相同。
Date.UTC()方法也返回表示日期的毫秒数，但它与Date.parse()的不同在于使用的参数：年份、基于0的月份（即传入的月份要比实际月份小1）、月中的哪一天、小时、分钟、秒 、毫秒。
Date.now()返回调用这个方法时的日期和时间毫秒数。IE9+支持。
